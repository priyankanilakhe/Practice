package LinkedList;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class RemoveDuplicatesFromSortedLinkedList {
	
	class Node
	{
		int data;
		Node next;
		Node(int data)
		{
			this.data=data;
			next=null;
		}
	}
	
	public void push(Node head)
	{
		Node newNode=head;
		newNode.next=head;
		head=newNode;
	}
	
	public Node PrintNode(Node head)
	{
		Node temnode=head;
		while(temnode != null)
		{
			//System.out.println(temnode.data+"->");
			temnode=temnode.next;
		}
		return temnode;
	}
	
	public void RemoveDuplicates(Node head)
	{
		HashMap<Integer,Boolean> map= new HashMap<>();
		Node temp=head;
		while(temp != null)
		{
			System.out.println(map.containsKey(temp.data));
			if(map.containsKey(temp.data))
			{
				System.out.println(temp.data+" ");
			}
			map.put(temp.data, true);
			temp=head.next;
		}
	}
	
	public static void main (String[] args)
    {
        Node head = null;
       
        /* Created linked list will be
        11->11->11->13->13->20 */
        head = push(head, 20);
        head = push(head, 13);
        head = push(head, 13);
        head = push(head, 11);
        head = push(head, 11);
        head = push(head, 11);
        System.out.print("Linked list before duplicate removal ");
        printList(head);
        System.out.print("\nLinked list after duplicate removal  ");
        removeDuplicates(head);
    }
	
	public void RemoceDuplicatesSol2(Node head)
	{
		Set<Integer> track= new HashSet<Integer>();
		Node temp=head;
		while(temp != null)
		{
			if(track.contains(arg0))
		}
	}

}

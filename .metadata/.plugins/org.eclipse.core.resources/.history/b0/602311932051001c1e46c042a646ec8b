package LinkedList;
class DetectCycleLinkedList {
    Node head; // head of list
 
    /* Linked list Node*/
    class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
 
    /* Inserts a new Node at front of the list. */
    public void push(int new_data)
    {
        /* 1 & 2: Allocate the Node &
                Put in the data*/
        Node new_node = new Node(new_data);
 
        /* 3. Make next of new Node as head */
        new_node.next = head;
 
        /* 4. Move the head to point to new Node */
        head = new_node;
    }
 
    void detectLoop()
    {
        Node slow_p = head, fast_p = head;
        int flag = 0;
        while (slow_p != null && fast_p != null
               && fast_p.next != null) {
            slow_p = slow_p.next;
            fast_p = fast_p.next.next;
            if (slow_p == fast_p) {
                flag = 1;
                break;
            }
        }
        if (flag == 1)
            System.out.println("Loop found");
        else
            System.out.println("Loop not found");
    }
 
    /* Driver program to test above functions */
    public static void main(String args[])
    {
        DetectCycleLinkedList llist = new DetectCycleLinkedList();
 
        llist.push(20);
        llist.push(4);
        llist.push(15);
        llist.push(10);
 
        /*Create loop for testing */
        llist.head.next.next.next.next = llist.head;
 
        llist.detectLoop();
    }
    
    
    
    //Second method
    static Node push(Node head_ref, int new_data)
    {
         
        // Allocate node
        Node new_node = new Node();
     
        // Put in the data
        new_node.data = new_data;
     
        new_node.flag = 0;
     
        // Link the old list off the new node
        new_node.next = head_ref;
     
        // Move the head to point to the new node
        head_ref = new_node;
        return head_ref;
    }
     
    // Returns true if there is a loop in linked
    // list else returns false.
    static boolean detectLoop(Node h)
    {
        while (h != null)
        {
             
            // If this node is already traverse
            // it means there is a cycle
            // (Because you we encountering the
            // node for the second time).
            if (h.flag == 1)
                return true;
     
            // If we are seeing the node for
            // the first time, mark its flag as 1
            h.flag = 1;
     
            h = h.next;
        }
        return false;
    }
}